import glob from 'fast-glob';
import fs from 'fs-extra';
import path from 'path';

import { ModuleDescriptor, PackageRevision, SearchOptions } from '../types';

/**
 * Resolves module search result with additional details required for iOS platform.
 */
export async function resolveModuleAsync(
  packageName: string,
  revision: PackageRevision,
  options: SearchOptions
): Promise<ModuleDescriptor | null> {
  const [podspecFile] = await glob('*/*.podspec', {
    cwd: revision.path,
    ignore: ['**/node_modules/**'],
  });

  if (!podspecFile) {
    return null;
  }

  const podName = path.basename(podspecFile, path.extname(podspecFile));
  const podspecDir = path.dirname(path.join(revision.path, podspecFile));

  return {
    podName,
    podspecDir,
    flags: options.flags,
    swiftModules: packageName === 'expo-cellular' ? ['CellularModule'] : [],
  };
}

/**
 * Generates Swift file that contains all autolinked Swift packages.
 */
export async function generatePackageListAsync(
  modules: ModuleDescriptor[],
  targetPath: string
): Promise<void> {
  const className = path.basename(targetPath, path.extname(targetPath));
  const generatedFileContent = await generatePackageListFileContentAsync(modules, className);

  await fs.outputFile(targetPath, generatedFileContent);
}

/**
 * Generates the string to put into the generated package list.
 */
async function generatePackageListFileContentAsync(
  modules: ModuleDescriptor[],
  className: string
): Promise<string> {
  const swiftModulesDescriptors = modules.filter(module => module.swiftModules.length);
  const swiftPods = swiftModulesDescriptors.map(module => module.podName);
  const swiftModules = [].concat(...swiftModulesDescriptors.map(module => module.swiftModules));

  return `// Automatically generated by expo-modules-autolinking.

import UMCore
${swiftPods.map(podName => `import ${podName}`).join('\n')}

@objc
public class ${className}: ModulesProvider {
  public override func exportedModules() -> [AnyModule.Type] {
    return [
      ${swiftModules.map(swiftModuleName => `${swiftModuleName}.self`).join('\n')}
    ]
  }
}
`;
}
